"""
author : 4everdestiny
create_time : 2022.5.26
description : this is the code to cover singelpayload's element
for each payload element: we have several type
1. elf_base: it means this element must have elf_base before, generally for PIE
2. libc_base: it means this element must have libc_base before, generally for every time
3. canary: it means this element must have canary before, generally for canary protection
4. heap_base: it means this element must have heap_base before, generally for heap attack
5. bytes: it means this element is a bytes element, just use it!
6. int64: it means this element is a int64 element, use p64 to unpack it!
7. int32: it means this element is a int32 element, use p32 to unpack it!
input : type and content
output : no output
"""


class PayloadElement():
    def __init__(self, datavalue=0, adjustinfo="elf_base", datatype="int64"):
        # datatype:
        # None, int64, bytes, int32
        self.datavalue = datavalue
        # for adjustinfo
        # None: no need to adjust
        # elf_base etc.: according to the adjustinfo, and adjust
        self.adjustinfo = adjustinfo
        self.datatype = datatype
        self.datavalue_bak = datavalue

    def SetAdjustInfo(self, adjustinfo="elf_base"):
        """
        set the adjustinfo in payload
        elf_base, code_base, canary, heap_base
        :param adjustinfo: the final adjustinfo you want to set
        :return: None
        """
        self.adjustinfo = adjustinfo

    def GetDataType(self):
        """
        get the data type of this PayloadElement
        :return: self.datatype
        """
        return self.datatype

    def GetAdjustInfo(self):
        """
        get the adjust info of this PayloadElement
        :return: self.adjustinfo
        """
        return self.adjustinfo

    def __str__(self):
        final_string = "[{datatype}:{adjustinfo}:{content}]".format(
            datatype=self.datatype, adjustinfo=self.adjustinfo,content=self.content)
        return final_string
