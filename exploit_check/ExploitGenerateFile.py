"""
author : 4everdestiny
create_time : 2022.3.23
description : this is the code to generate a payload file written in pwntools

input : payload list
output : the payload file
"""
from log.log import Log
from exploit_generation.ROPGeneration import ROPGeneration

log = Log()


class ExploitGenerateFile:
    def __init__(self, binarypath="", payloadlist=None, filepath="",
                 ip="127.0.0.1", port=10001, remote=False, argv=[],
                 mips_argv=[]):
        self.binarypath = binarypath
        self.payloadlist = payloadlist
        if filepath == "":
            self.filepath = "../exploit_check/exploit_generated_temp.py"
        else:
            self.filepath = filepath
        self.remote = remote
        self.ip = ip
        self.port = port
        self.argv = argv
        self.mips_argv = mips_argv

    def WriteFile(self):
        template = """from pwn import p64, u64, p32, u32
import pwn
import sys
        
pwn.context.log_level = "debug"
pwn.context.timeout = 20\n"""
        if not self.remote:
            if len(self.mips_argv) != 0:
                argv = self.mips_argv[0]
                debug_argv = self.mips_argv[1]
                template += 'if len(sys.argv) < 2:\n'
                template += '\tp = pwn.process({argv})\n'.format(argv=argv)
                template += 'else:\n'
                template += '\tp = pwn.process({argv})\n'.format(argv=debug_argv)
                # template += "pwn.gdb.attach(p)\n"
            elif len(self.argv) == 0:
                template += 'p = pwn.process("{binarypath}")\n'.format(binarypath=self.binarypath)
                template += "pwn.gdb.attach(p)\n"
            else:
                template += 'p = pwn.gdb.debug({argv})\n'.format(argv=self.argv)
        else:
            template += 'p = pwn.remote("{ip}",{port})\n'.format(
                ip=self.ip, port=self.port
            )
        #template +="p.recv()\n"
        write_content = template
        payloadlist = self.payloadlist.GetList()
        for singlepayload in payloadlist:
            write_content += r"{payload}".format(payload=singlepayload.GeneratePayloadInFile())
        write_content += "p.interactive()\n"
        with open(self.filepath, "w") as f:
            f.write(write_content)


if __name__ == '__main__':
    binarypath = "../binaries/stack_overflow/dynamic/test4/dynamic_test4"
    ROPGeneration = ROPGeneration(binarypath, needlength=0x100)
    payload = ROPGeneration.GeneratePayload()
    egf = ExploitGenerateFile(binarypath=binarypath, payloadlist=payload)
    egf.WriteFile()
